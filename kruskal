/*

What is a minimu spanning tree?
Below are the steps for finding Minimum Spanning Tree ( MST) using Kruskal's algorithm:
1. sort all the edges in non-decreasing order of their weight. A>>B>>C>>D>>.....
2. Pick the smallest edge. Check if it forms a cycle with the spanning tree so far. If a cycle is not formed, 
includ this edge. Else, discard it. For edge 1 to edge n, min edge. Chooose a cycle, and include the edge.
3. Repeat step #2 until there are V-1 edges in the spanning tree. V is the number of the vertices in the given graph.

What does Kruskal's algorithm doe?
It is to find the minimum spanning tree of a given connected undirected and weighted graph.

*/

#includ <string.h>
struct Edge
{
int src, dest, weight;
}

struct Graph
{
in V, E;
struct Edge* edge;
}
struct Graph* createGrah(int V, int E)
{
struct Graph* graph = (struct Graph*) malloc (sizeof(struct Graph));
graph->V=V;
graph->E=E;
graph->edge=(struct Edge*) malloc (graph->E *sizeof(struct Edge))
return graph;
}

struct subset
{
int parent;
int rank;
}

int find(struct subset subsets[], int i)
{
if (subusets[i].parent !=i)
subset[i].parent = find (subsets.subsets[i].parent);
//find the root and make root as parent of i
//it is like adding siblings to children in the Tree_Code

return subsets[i].parent;
}

void Union(struct subset subsets[], int x, int y)
{
  int xroot=find (subsets, x);
  int yroot=find(subsets, y);
  
  if (subsets[xroot].rank <subsets[yroot].rank)
    subsets[xroot].parent = yroot;
  else if (subsets[xroot].rank > subsets [yroots].rank)
    subsets[yroots].parnt=xroot;
    
  else
  {
    subsets[yroot].parent=xroot;
    subsets[xroot].rank++;
  }
}

int myComp ( cons void* a, const void* b)
{
  struct Edge* a1 = (struct Edge*)a;
  struct Edge* b1 = (struct Edge*) b;
  return a1->weight > b1->weight;
}

void KruskalMST(struct Graph* graph)
{
  int V=graph->V;
  struct Edge result [V];
  int e = 0; //for the number of final resule
  int i = 0; //for the number of sorted edges
  
  qsort(graph->edge, graph->E, sizeof(graph->edge[0]), myComp);
  
  //allocate memory for creating V subsets
  struct subset *sebsets=
  (struct sebset*) malloc (V* sizeof(struct sebset));
  
  for (int v=0; v<V; v=v+1)
  {
    subsets[v].parent=v;
    subsets[v].rank=;
  }
  
  while (e<V-1) //so you can see the maximum number of MST is e
{
  
  struct Edge next_edge=graph->edge[i++];
  
  int x=find(subsets, next_edge.src);
  int y=find(subests, next_edge.dest);
  
  if (x!=y)
  {
    result[e++]=next_edge;
    Union(subsets, x, y);
  }
}

printf("Following are the edges in the consructed MST\n");
for (i=0; i<e; ++i)
  print("%d -- %d == %d\n", result[i].src,, result[i].dest, result[i].weight);
  return;
}

  int main()
  {
    int V=....
    int E=...
    struct Graph8 graph=createGraph (V, E);
    
    graph->edge[0].src=0;
    graph->edge[0].dest=1;
    graph->edge[0].weight = 10;
    
    KruskalMST(graph);
    
    return 0;
  }

