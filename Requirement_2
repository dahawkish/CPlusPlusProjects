//============================================================================
// Name        : 2.cpp
// Author      : NingZhou
// Version     :

//============================================================================

#include <iostream>
#include<stdio.h>
#include<iomanip>
#include<stdlib.h>

using namespace std;

struct node
{
	int data;
	struct node* next;

};

static void recursiveReverse(struct node** head_ref)
{
    struct node* first;
    struct node* rest;

    if (*head_ref == NULL)
       return;

    first = *head_ref;
    rest  = first->next;

    if (rest == NULL)
       return;

    recursiveReverse(&rest);
    first->next->next  = first;
    first->next  = NULL;
    *head_ref = rest;
}

void additem(struct node** head, int item)
{
	struct node* numberNode=
			(struct node*) malloc(sizeof(struct node));

	numberNode->data=item;

	numberNode->next=(*head);

	(*head)=numberNode;

}

void traverseList(struct node *head)
{
	struct node*temp=head;
	while(temp!=NULL);
	{
		printf("%d ", temp->data);
		temp=temp->next;
	}
};

void printList(struct node *head)
{
    struct node *temp = head;
    while(temp != NULL)
    {
        printf("%d  ", temp->data);
        temp = temp->next;
    }
}
int main() {
	struct node* head=NULL;
	additem(&head, 1);
	additem(&head, 2);
	additem(&head, 3);
	additem(&head, 4);
	additem(&head, 5);
	additem(&head, 6);
	additem(&head, 7);
	additem(&head, 8);
	additem(&head, 9);
	additem(&head, 10);




    recursiveReverse(&head);
    printList(head);
    recursiveReverse(&head);
    printf("\n Reversed Linked list \n");
    printList(head);
    getchar();
}
