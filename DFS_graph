/* 
algorithm
int main () {

users input a directed vertice / directed vertices
create a graph with all the vertices
choose a n*n array to link all the vertices for the graph
search the graph using DFS
create a function for DFS
}
*/

//class of a graph, with numbers of vertices, objects of lists, and edges etc.
//create an object under graph and name functions DFS, input vertices, create edges and print functions
//bascially, we choose a pair of vertice (a, b) from a list of vertices [ (a,b), (a, c), (a, d), (b, d)]
//we choose a and find out what adjacent to a, we have a->b, a->c, a->d and this is how we create the graph
//and then we see the next distinct element among the vertices for the beg point, which is b; we have only b->d
//the rest of the distinct elements are end points and visited
//this is how we search the vertcies

#include <iostream>
#include <ctime>
#include<stdio.h>
#include<iomanip>
#include<stdlib.h>
#include <list>

using namespace std;
struct node{
    int info;
    struct node *next;
};

class stack{
    struct node *top;
    public:
        stack();
        void push(int);
        int pop();
        bool isEmpty();
        void display();
};

stack::stack(){
    top = NULL;
}

void stack::push(int data){
    node *p;
    if((p=(node*)malloc(sizeof(node)))==NULL){
        cout<<"Memory Exhausted";
        exit(0);
    }
    p = new node;
    p->info = data;
    p->next = NULL;
    if(top!=NULL){
        p->next = top;
    }
    top = p;
}

int stack::pop(){
    struct node *temp;
    int value;
    if(top == NULL){
        cout<<"\nThe stack is Empty"<<endl;
    }else{
        temp = top;
        top = top->next;
        value = temp->info;
        delete temp;
    }
    return value;
}

bool stack::isEmpty(){
    return (top == NULL);
}

void stack::display(){
    struct node *p = top;
    if(top==NULL){
        cout<<"\nNothing to Display\n";
    }else{
        cout<<"\nThe contents of Stack\n";
        while(p!=NULL){
            cout<<p->info<<endl;
            p = p->next;
        }
    }
}

class Graph {
    private:
        int n;
        int **E;
    public:
        Graph(int size = 2);
        ~Graph();
        bool isConnected(int, int);
        void addEdge(int x, int y);
        void DFS(int , int);
};

Graph::Graph(int size) {
    int i, j;
    if (size < 2) n = 2;
    else n = size;
    E = new int*[n];
    for (i = 0; i < n; ++i)
        E[i] = new int[n];
    for (i = 0; i < n; ++i)
        for (j = 0; j < n; ++j)
            E[i][j] = 0;
}

Graph::~Graph() {
    for (int i = 0; i < n; ++i)
    delete [] E[i];
    delete [] E;
}

bool Graph::isConnected(int x, int y) {
    return (E[x-1][y-1] == 1);
}

void Graph::addEdge(int x, int y) {
    E[x-1][y-1] = E[y-1][x-1] = 1;
}

void Graph::DFS(int x, int required){
    stack s;
    bool *visited = new bool[n+1];
    int i;
    for(i = 0; i <= n; i++)
        visited[i] = false;
    s.push(x);
    visited[x] = true;
    if(x == required) return;
    cout << "Depth first Search starting from vertex ";
    cout << x << " : " << endl;
    while(!s.isEmpty()){
        int k = s.pop();
        if(k == required) break;
        cout<<k<<" ";
        for (i = n; i >= 0 ; --i)
            if (isConnected(k, i) && !visited[i]) {
                s.push(i);
                visited[i] = true;
            }
    }
    cout<<endl;
    delete [] visited;
}

int main(){

	//vertices [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

    Graph g(11);
    g.addEdge(1, 2);    g.addEdge(1, 3);  g.addEdge(10,9); g.addEdge(1,5);  g.addEdge(3,11);
    g.addEdge(2, 4);    g.addEdge(3, 4);  g.addEdge(7,7);  g.addEdge(2,9);  g.addEdge(4,11);
    g.addEdge(3, 1);    g.addEdge(4 ,7);  g.addEdge(5,4);  g.addEdge(2,10); g.addEdge(7,6);
    g.addEdge(5, 1);    g.addEdge(5, 7);  g.addEdge(1,10); g.addEdge(2,8);  g.addEdge(7,5);
    g.addEdge(10, 11);  g.addEdge(8,9);   g.addEdge(1,7);  g.addEdge(3,11); g.addEdge(2,6);
    g.addEdge(5,5);
    g.addEdge(6,9);
    g.addEdge(11,9);
    g.DFS(3,4); //it won't count 4 and 11 because it 1, 2, 3 and 4 is a cycle; 9, 10, 11 is a cycle.
    g.DFS(8,9); //it won't count 9 because it is popped as 9 is part of the cycle as the first entry of the cycle 9, 10, 11.
}
