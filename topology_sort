/*

Topological sorting for directed acyclic graph (DAG) IS A LINEAR ORDERING OF VERTICES SUCH THAT FOR EVERY DIRECTED EDGE UV, VERTEX U COMES BEFORE V IN THE ORDERING.
Topological soring for a graph is not possible if the graph is not a DAG.

Directed Acyclic Graph: http://en.wikipedia.org/wiki/Directed_acyclic_graph

Topological Soring vs. Depth Frist Traversal (DFS):
In DFS, we print a vertext and then recursively call DFS for its adjacent vertices.
In topSort, we need to print a vertect before its adjacent vertice.

*/

#includ <list>
#includ <stack>

class Graph
{
  int V;
  list<int> *adj;
  void topologicalSortUntil(int v, bool visited[], stack<int> &Stack);
  public:
  Graph(int V);
  void addEdge(int v, int w);
  void topologicalSort();
}

Graph::graph(int V)
{
  this->V=V;
  adj=new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
  ajd[v].push_back(w);
}

