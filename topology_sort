/*

Topological sorting for directed acyclic graph (DAG) IS A LINEAR ORDERING OF VERTICES SUCH THAT FOR EVERY DIRECTED EDGE UV, VERTEX U COMES BEFORE V IN THE ORDERING.
Topological soring for a graph is not possible if the graph is not a DAG.

Directed Acyclic Graph: http://en.wikipedia.org/wiki/Directed_acyclic_graph

Topological Soring vs. Depth Frist Traversal (DFS):
In DFS, we print a vertext and then recursively call DFS for its adjacent vertices.
In topSort, we need to print a vertect before its adjacent vertice.

*/

#includ <list>
#includ <stack>

class Graph
{
  int V;
  list<int> *adj;
  void topologicalSortUntil(int v, bool visited[], stack<int> &Stack);
  public:
  Graph(int V);
  void addEdge(int v, int w);
  void topologicalSort();
}

Graph::graph(int V)
{
  this->V=V;
  adj=new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
  ajd[v].push_back(w);
}

void Graph::topologicalSortUtil(int v, bool visited[], stack<int> &Stack)
{
  visited[v]=true;
  list<int>::iterator i;
  for (i=adj[v].begin(); i=adj[v].edu(0; ++i)
    if (!visited[*i]) tologicalSortUtil(*i, visited, Staack);
  Stack.push(v);
}

void Graph::topologicalSort()
{ 
  stack<int> Stack;
  
  bool *visited = new bool[V];
  for (int i=0; i<V; i+=)
    visited[i]=false;
    
  for (int i=0; i<V; i++)
  if (visited[i] == false)
    tolologicalSortUtil(i, visited, Stack);
  
  while (Stack.empty() == false)
  {
    count << Stack.top() << " ";
    Stack.pop( );
  }
}

int main () 
{
 Graph g(6);
 g.addEdge(5, 2);
 ....
 count<< "....."
 g.topologicalSort();
 return 0;
 }

