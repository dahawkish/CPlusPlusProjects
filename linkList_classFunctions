#include <iostream>
#include <stdio.h>
#include <iomanip>
#include <stdlib.h>

using namespace std;

class Node{
public:
	int data;
	Node *next;
	//Node(){
	//}
};

class linkList{
public:
	Node *element;
    linkList() {
        element = NULL;
    }

    linkList(int val) {
        Node *element = new Node();
        cout << "element = " << element << endl;
        element->data = val;
    }
    Node *addNode(Node *e, int eValue);
    Node *Traverse(Node *e, int *temp);
    Node *sumRecursion(Node *element, int eValue);
};


Node *linkList::addNode(Node *e, int eValue) {
        Node *tmp = new Node();
        e->next = tmp;
        tmp->data = eValue;
        return (addNode(e->next, eValue));

}

Node *linkList::Traverse(Node *e){
	Node *tmp= new Node();
	while (tmp!=NULL)
	{
		printf("%d ", tmp->data);
		tmp = tmp -> next;
	}
}

/*
Node *linkList::Traverse(Node *start) {
    Node *hey;

    if (start != NULL) {
        cout << start->data << "->";
        Traverse(start->next, tmp);

        tmp = start->next;
        while (tmp != NULL) {
            cout << tmp->data << "->";
            Traverse(tmp->next, tmp);
            tmp = tmp->next;
            	if (*tmp >= tmp->data) {
            		return *tmp;
            	}
            	else {
            		*tmp = tmp->data ;
            		return *tmp;
            	};
        }

}
*/

int main()
{

	linkList newLink;
	Node *e=new Node();
	newLink.addNode(e, 15);
	newLink.addNode(e, 1);
	newLink.addNode(e,3);
	int temp;
	newLink.Traverse(e);
	return 0;
}
